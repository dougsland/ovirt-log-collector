#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import os
import subprocess
import tempfile

from flask import Flask, request, redirect, url_for
from werkzeug import secure_filename


UPLOAD_DIR = tempfile.gettempdir()
ALLOWED_EXTENSIONS = set(['tar.xz', 'tar'])
ANALYZER_BIN = 'ovirt-log-collector-analyzer'
ANALYZER_OUTPUT_FILE = 'analyzer_report.html'
HTTP_PORT = 8080

app = Flask(__name__)
application = app

app.config['UPLOAD_DIR'] = UPLOAD_DIR


def allowed_file(filename):
    """
    Check if the file uploaded is allowed
    Returns: True or raise
    """
    if '.'.join(filename.split(".")[1:]) not in ALLOWED_EXTENSIONS:
        raise RuntimeError(
            "File extension is not supported for %s, allowed are: [%s]" % (
                filename, ' '.join(ALLOWED_EXTENSIONS))
        )

    return True


def execute_cmd(command):
    """
    Execute cmd, use ['cmd' 'argument'] format for command argument
    Returns: output or raise an error
    """
    p = subprocess.Popen(
        command,
        stderr=subprocess.PIPE,
        shell=False
    )
    out, err = p.communicate()
    if p.returncode != 0:
        raise RuntimeError("analyzer failed, rc=%s, err=%r",
                           p.returncode, err)
    return out


def version():
    execute_cmd([ANALYZER_BIN, '--version'])

@app.route("/", methods=['GET', 'POST'])
def index():
    """
    Index page, grab sosreport file via POST method
    and execute ovirt-log-collector-analyzer

    Returns: analyze generated by ovirt-log-collector-analyzer
    """

    if request.method == 'POST':
        uploaded_file = request.files['file']
        sosreport = uploaded_file.filename
        if not uploaded_file:
            return redirect(url_for('index'))

        if uploaded_file and allowed_file(sosreport):
            filename = secure_filename(sosreport)
            uploaded_file.save(
                 os.path.join(
                     app.config['UPLOAD_DIR'],
                     filename
                 )
            )

            try:
                os.chdir(UPLOAD_DIR)

                report = '{tmpdir}/{sosfile}'.format(
                    tmpdir=UPLOAD_DIR,
                    sosfile=sosreport
                )

                execute_cmd([
                    ANALYZER_BIN,
                    "--postgres-db-user=" + os.environ['POSTGRESQL_USER'],
                    "--postgres-db-password=" + os.environ[
                        'POSTGRESQL_PASSWORD'],
                    "--postgres-db-address=" + os.environ.get(
                        'DB_SERVER', 'postgresql'),
                    report
                ])
                try:
                    with open(ANALYZER_OUTPUT_FILE, 'r') as f:
                        analyzer_output_file = f.read()
                finally:
                    os.unlink(ANALYZER_OUTPUT_FILE)
            finally:
                os.unlink(report)

            return analyzer_output_file

    return """
    <title>Log Analyzer</title>
    <h1>Upload sosreport</h1>

    This page will generate an analyze of sosreport via
    ovirt-log-collector-analyzer by<br>

    uploading the sosreport generated in Engine
    (prefeable with hypervisors included).<br><br>

    In case you would like to upload via console,
    you might use the following format:<br><br>
    # curl -H 'Expect:' -i -X POST -F
        "file=@sosreport-file.tar.xz" IP:PORT > report

    <form action="" method=post enctype=multipart/form-data>
      <p><input type=file name=file>
         <input type=submit value=Upload>
    </form>
    <br>
    To report a bug or request improvements, <a href="https://bugzilla.redhat.com/enter_bug.cgi?product=ovirt-log-collector">please use this link</a>.<br>
    For others topics, use <a href="mailto:devel@ovirt.org">devel@ovirt.org</a> or contact the <a href="mailto:dougsland@redhat.com">maintainer</a>.<br>
    Version: <a href="https://github.com/oVirt/ovirt-log-collector">%s</a>
    """ % version()


@app.errorhandler(500)
def server_error(err):
    """ Server error handle """
    return """
    An internal error occurred: <pre>{}</pre>
    See logs for full stacktrace.
    """.format(err), 500


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=HTTP_PORT)
